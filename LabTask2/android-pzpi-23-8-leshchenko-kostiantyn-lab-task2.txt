Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії







ЗВІТ
до лабораторного заняття 2 з дисципліни
"Програмування під Android"
на тему " Регулятори SeekBar"






Виконав ст. гр ПЗПІ-23-8                                               
Лещенко Костянтин Сергійович                                     
                                                                                          
Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович

Харків 2024
Мета завдання:
Розробити Android-застосунок, який дозволяє користувачу змінювати колір панелі за допомогою трьох регуляторів SeekBar, кожен з яких відповідає за одну з компонентів кольору RGB. Зовнішній вигляд екрану редактора повинен адаптуватися в залежності від орієнтації пристрою. У портретній орієнтації регулятори мають розташовуватися під панеллю, займати 1/3 висоти екрана і розтягуватися на всю ширину, а в ландшафтній — розміщуватися праворуч від панелі, займати 1/3 ширини екрану, при цьому кольорова панель повинна займати решту екрану.



 Хід роботи

Для реалізації цього завдання спершу було створено інтерфейс користувача, в якому для управління кольором панелі використано три SeekBar, кожен з яких відповідає за одну з компонент RGB (червоний, зелений, синій). Додатково, була створена кольорова панель, яка змінює свій колір відповідно до значень, що обираються на SeekBar.

Щоб кожен SeekBar дозволяв змінювати значення відповідної компоненти кольору в діапазоні від 0 до 255. Для цього було реалізовано прослуховування подій на кожному SeekBar за допомогою методу setOnSeekBarChangeListener, щоб на кожну зміну значень RGB панель оновлювала свій колір за допомогою методу setBackgroundColor(). В результаті, при зміні значень SeekBar колір панелі змінювався миттєво.

Наступним кроком було забезпечення адаптивності інтерфейсу в залежності від орієнтації екрану. Для цього був використаний метод onConfigurationChanged, який реагує на зміну орієнтації пристрою. Коли орієнтація змінюється на ландшафтну, регулятори SeekBar переміщуються праворуч від панелі, а панель займає більшу частину екрану. В портретній орієнтації регулятори з'являються під панеллю, займаючи 1/3 висоти екрану, а сама панель займає залишок. Для цього використовуються LayoutParams для зміни розмірів та орієнтації елементів.

Під час реалізації було використано компонент LinearLayout, що дозволяє легко змінювати орієнтацію елементів і відповідно адаптувати інтерфейс. У ландшафтній орієнтації регулятори і панель займають різні частини екрану відповідно до заданих пропорцій, а в портретній — регулятори з'являються знизу і займають всю ширину екрана.



ВИСНОВКИ

У результаті виконання завдання було розроблено функціональний редактор кольору, який дозволяє користувачу змінювати колір панелі через регулятори SeekBar для кожної компоненти RGB. Завдання успішно реалізовано за допомогою стандартних Android-компонентів, таких як SeekBar, LinearLayout, і View.
Завдяки використанню LinearLayout для розташування елементів і LayoutParams для їх пропорційного налаштування, інтерфейс адаптується до будь-якої орієнтації екрану без додаткових складнощів. У результаті застосунок працює коректно, надаючи користувачеві простий і зручний спосіб змінювати колір панелі.

Посилання на відео в YouTube: https://youtu.be/CGf5jZFBaqE


ВИКОРИСТАННІ ДЖЕРЕЛА

1. YouTube. " Як Зробити Android Додаток з Нуля" https://www.youtube.com/watch?v=p0tmWQIKk4g. 
2. YouTube. " SeekBar Tutorial | How to use SeekBar in Android" https://www.youtube.com/watch?v=wvEYmFf7bhc. 
3. Національний університет радіоелектроніки. https://dl.nure.ua/. 






ДОДАТОК А
Інтерфейс активності у файлі activity_main.xml

1.  <?xml version="1.0" encoding="utf-8"?>
2.  <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
3.    xmlns:app="http://schemas.android.com/apk/res-auto"
4.    xmlns:tools="http://schemas.android.com/tools"
5.    android:id="@+id/main"
6.    android:layout_width="match_parent"
7.    android:layout_height="match_parent"
8.    tools:context=".MainActivity">

9.    <LinearLayout

10.        android:id="@+id/layout1"
11.        android:layout_width="match_parent"
12.        android:layout_height="match_parent"
13.        android:orientation="vertical"
14.        android:fitsSystemWindows="true">

15.        <View
16.            android:id="@+id/colorP"
17.            android:layout_width="match_parent"
18.            android:layout_height="0dp"
19.            android:layout_weight="2"
20.             />

21.    <LinearLayout
22.       android:id="@+id/linearLayout"
23.        android:layout_width="match_parent"
24.        android:layout_height="0dp"
25.        android:layout_weight="1"
26.        android:orientation="vertical"
27.        >

28.        <SeekBar
29.            android:id="@+id/seekBarR"
30.            android:layout_width="match_parent"
31.            android:layout_height="wrap_content"
32.            android:thumbTint="#FF0000"
33.            android:max="255"/>

34.        <SeekBar
35.            android:id="@+id/seekBarG"
36.            android:layout_width="match_parent"
37.            android:layout_height="wrap_content"
38.            android:thumbTint="#00FF07"
39.            android:max="255"/>

40.        <SeekBar
41.            android:id="@+id/seekBarB"
42.            android:layout_width="match_parent"
43.            android:layout_height="wrap_content"
44.            android:thumbTint="#002FFF"
45.            android:max="255"/>
46.    </LinearLayout>


47.    </LinearLayout>
48.  </androidx.constraintlayout.widget.ConstraintLayout>










ДОДАТОК Б
Файл MainActivity.java
1. package com.example.kostiantyn_leshchenko_pzpi_23_8;

2. import android.content.res.Configuration;
3. import android.graphics.Color;
4. import android.os.Bundle;
5. import android.view.View;
6. import android.widget.LinearLayout;
7. import android.widget.SeekBar;

8. import androidx.activity.EdgeToEdge;
9. import androidx.appcompat.app.AppCompatActivity;
10. import androidx.core.graphics.Insets;
11. import androidx.core.view.ViewCompat;
12. import androidx.core.view.WindowInsetsCompat;

13. public class MainActivity extends AppCompatActivity {
14. private View colorP;
15. private SeekBar seekBarR, seekBarG, seekBarB;
16. private LinearLayout layout1, linearLayout;
17.    @Override
18.    protected void onCreate(Bundle savedInstanceState) {
19.        super.onCreate(savedInstanceState);
20.        EdgeToEdge.enable(this);
21.        setContentView(R.layout.activity_main);

22.        colorP = findViewById(R.id.colorP);
23.        seekBarR = findViewById(R.id.seekBarR);
24.        seekBarG = findViewById(R.id.seekBarG);
25.        seekBarB = findViewById(R.id.seekBarB);
26.        linearLayout = findViewById(R.id.linearLayout);
27.        layout1 = findViewById(R.id.layout1);
28.        configureLayoutForOrientation();

29.        SeekBar.OnSeekBarChangeListener listener = new SeekBar.OnSeekBarChangeListener() {
30.            @Override
31.            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
32.                updateColor();
33.            }

34.            @Override
35.            public void onStartTrackingTouch(SeekBar seekBar) {

36.            }

37.            @Override
38.            public void onStopTrackingTouch(SeekBar seekBar) {

39.           }
40.        };
41.        seekBarR.setOnSeekBarChangeListener(listener);
42.        seekBarG.setOnSeekBarChangeListener(listener);
43.        seekBarB.setOnSeekBarChangeListener(listener);
44.        updateColor();
45.    }
46.    private void updateColor(){
47.        int red = seekBarR.getProgress();
48.        int green = seekBarG.getProgress();
49.        int blue = seekBarB.getProgress();
50.        int color = Color.rgb(red, green, blue);
51.        colorP.setBackgroundColor(color);
52.    }

53.    private void configureLayoutForOrientation() {

54.        int orientation = getResources().getConfiguration().orientation;

55.        if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
56.            layout1.setOrientation(LinearLayout.HORIZONTAL);


57.           colorP.setLayoutParams(new LinearLayout.LayoutParams(
58.                    0, LinearLayout.LayoutParams.MATCH_PARENT, 2));
60.            linearLayout.setLayoutParams(new LinearLayout.LayoutParams(
61.                    0, LinearLayout.LayoutParams.MATCH_PARENT, 1));
62.        } else {
63.            layout1.setOrientation(LinearLayout.VERTICAL);


64.           colorP.setLayoutParams(new LinearLayout.LayoutParams(
65.                    LinearLayout.LayoutParams.MATCH_PARENT, 0, 2));
66.           linearLayout.setLayoutParams(new LinearLayout.LayoutParams(
67.                    LinearLayout.LayoutParams.MATCH_PARENT, 0, 1));
68.        }
69.    }


70. }

